{"version":3,"file":"static/js/868.d580af35.chunk.js","mappings":"qIACA,QAAsB,oB,aCStB,MAaA,EAbeA,IAAuD,IAAtD,SAAEC,EAAQ,SAAEC,EAAQ,KAAEC,EAAI,QAAEC,GAAoBJ,EAC9D,OACEK,EAAAA,EAAAA,KAAA,UACEF,KAAMA,EACND,SAAUA,EACVI,UAAWC,EACXC,QAASJ,EAAQH,SAEhBA,GACM,C,oDClBb,QAA4B,iCAA5B,EAAqE,6BAArE,EAA0G,6B,sBCWnG,MAAMQ,EAAWT,IAIH,IAJI,MACvBU,EACAC,MAAM,MAAEC,EAAK,QAAEC,MACZC,GACUd,EACb,MAAMe,GAAQC,EAAAA,EAAAA,QAA4B,OAE3CC,EAAAA,EAAAA,IAAkBF,EAAMG,QAASJ,EAAMK,YAAaL,EAAMM,WAEzD,MAAMC,EAAWT,GAASC,EAE1B,OACES,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAtB,SAAA,EACEI,EAAAA,EAAAA,KAAA,OAAKC,UAAWe,EAAWd,EAAgBA,EAAcN,UACvDI,EAAAA,EAAAA,KAAA,YAAUmB,IAAKT,KAAWL,KAAWI,OAEvCT,EAAAA,EAAAA,KAAA,QAAMC,UAAWC,EAAkBN,SAAEoB,EAAWT,EAAQ,SACvD,EAIMa,EAAQC,IAIA,IAJC,MACpBhB,EACAC,MAAM,MAAEC,EAAK,YAAEe,EAAW,QAAEd,MACzBC,GACUY,EACb,MAAML,GAAYT,GAASe,IAAgBd,EAC3C,OACES,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAtB,SAAA,EACEI,EAAAA,EAAAA,KAAA,OAAKC,UAAWe,EAAWd,EAAgBA,EAAcN,UACvDI,EAAAA,EAAAA,KAAA,YAAWK,KAAWI,OAExBT,EAAAA,EAAAA,KAAA,QAAMC,UAAWC,EAAkBN,SAChCoB,EAAWT,GAASe,EAAc,SAEpC,C,oDC9CP,SAAgB,UAAY,yBAAyB,QAAU,uBAAuB,KAAO,qB,sCCA7F,SAAgB,KAAO,wBAAwB,OAAS,0BAA0B,aAAe,gCAAgC,UAAY,6BAA6B,aAAe,gCAAgC,cAAgB,iCAAiC,MAAQ,yBAAyB,QAAU,2BAA2B,WAAa,8BAA8B,KAAO,wBAAwB,YAAc,gC,yDC6Bxa,MAuFA,EAvFkB3B,IAAuC,IAAtC,MAAE4B,EAAK,WAAEC,GAAuB7B,EACjD,OACEK,EAAAA,EAAAA,KAACyB,EAAAA,GAAI,CACHC,SAAUC,UACR,IAAIC,QAAqBL,EAAMM,GAC/B,GAAID,EACF,MAAO,CAAE,CAACE,EAAAA,IAAaF,EACzB,EAEFG,cAAe,CAAEC,YAAY,GAC7BC,OAAQZ,IAAA,IAAC,YAAEC,EAAW,aAAEY,EAAY,OAAEL,EAAM,WAAEM,EAAU,SAAEC,GAAUf,EAAA,OAClEJ,EAAAA,EAAAA,MAAA,QAAMS,SAAUQ,EAAcG,OAAO,GAAGpC,UAAWC,EAAQoC,KAAK1C,SAAA,EAC9DI,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAQqC,OAAO3C,SAAC,uDAGhCI,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAQsC,aAAa5C,UACnCI,EAAAA,EAAAA,KAACyC,EAAAA,GAAK,CACJC,KAAK,QACLC,UAAWvB,EAAAA,EACXtB,KAAK,OACL8C,YAAa,QACbC,UAAUC,EAAAA,EAAAA,IAAkBC,EAAAA,IAAUC,EAAAA,EAAAA,IAAU,KAChDC,aAAa,WACbhD,UAAWC,EAAQgD,eAGvBlD,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAQsC,aAAa5C,UACnCI,EAAAA,EAAAA,KAACyC,EAAAA,GAAK,CACJC,KAAK,WACLC,UAAWvB,EAAAA,EACXtB,KAAK,WACL8C,YAAa,WACbC,UAAUC,EAAAA,EAAAA,IAAkBC,EAAAA,IAAUC,EAAAA,EAAAA,IAAU,KAChDC,aAAa,mBACbhD,UAAWC,EAAQgD,eAGvBjC,EAAAA,EAAAA,MAAA,OAAKhB,UAAWC,EAAQiD,aAAavD,SAAA,EACnCqB,EAAAA,EAAAA,MAAA,SAAArB,SAAA,EACEI,EAAAA,EAAAA,KAACyC,EAAAA,GAAK,CACJC,KAAK,aACLC,UAAW,QACX7C,KAAK,WACLG,UAAWC,EAAQkD,cAErBpD,EAAAA,EAAAA,KAAA,QAAAJ,SAAM,oBAERI,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAQmD,cAAczD,UACpCI,EAAAA,EAAAA,KAACsD,EAAAA,EAAI,CAACZ,KAAM,gBAEdzB,EAAAA,EAAAA,MAAA,OAAKhB,UAAWC,EAAQqD,MAAM3D,SAAA,EAC5BI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,uBACJI,EAAAA,EAAAA,KAAA,QAAAJ,SAAM,sEAKT4B,GACCP,EAAAA,EAAAA,MAAA,OAAKhB,UAAWC,EAAQsC,aAAa5C,SAAA,EACnCI,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAQsD,QAAQ5D,UAC9BI,EAAAA,EAAAA,KAAA,OAAKyD,IAAKjC,EAAYkC,IAAI,eAE5B1D,EAAAA,EAAAA,KAACyC,EAAAA,GAAK,CACJC,KAAK,UACLC,UAAWvB,EAAAA,EACXtB,KAAK,OACL8C,YAAa,qBAEb3C,UAAWC,EAAQgD,eAGrB,MACJlD,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAQyD,WAAW/D,UACjCI,EAAAA,EAAAA,KAAC4D,EAAAA,EAAM,CAAC/D,SAAUsC,GAAcC,EAAUtC,KAAM,SAASF,SAAC,eAI5DI,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAQ2D,OACvBC,QAAQxC,KACPtB,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAQoB,YAAY1B,SAAE0B,MAEnC,GAET,ECpEN,GAAeyC,EAAAA,EAAAA,KAPUC,IAChB,CACLC,OAAQD,EAAME,KAAKD,OACnBzC,WAAYwC,EAAME,KAAK1C,cAIa,CAAED,MAAM,MAAhD,EA1Bc5B,IAA+C,IAA9C,OAAEsE,EAAM,MAAE1C,EAAK,WAAEC,GAAuB7B,EACrD,OAAOsE,GACLjE,EAAAA,EAAAA,KAACmE,EAAAA,GAAQ,CAACC,GAAI,iBAEdpE,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAQmE,UAAUzE,UAChCqB,EAAAA,EAAAA,MAAA,OAAKhB,UAAWC,EAAQoE,QAAQ1E,SAAA,EAC9BqB,EAAAA,EAAAA,MAAA,OAAKhB,UAAWC,EAAQqE,KAAK3E,SAAA,EAC3BI,EAAAA,EAAAA,KAAA,OACEyD,IAAK,0BACLC,IAAI,UAEN1D,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAQsE,OAAO5E,SAAC,eAEjCI,EAAAA,EAAAA,KAACyE,EAAS,CAAClD,MAAOA,EAAOC,WAAYA,QAG1C,G,oDCjCI,MAAMuB,EAA2B2B,GAC/BA,OAAQC,EAAY,mBAGhB3B,EACV4B,GACAF,IACa,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOG,QAASD,EAAM,iBAAiBA,iBAAgBD,EAGrD7B,EACX,mBAAAgC,EAAAC,UAAAF,OAAIG,EAAU,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAVF,EAAUE,GAAAH,UAAAG,GAAA,OACbR,GACCM,EAAWG,QACT,CAAC5E,EAAO6E,IAAc7E,GAAS6E,EAAUV,SACzCC,EACA,C","sources":["webpack://react-kabzda-1/./src/components/common/button/button.module.css?89cf","components/common/button/Button.tsx","webpack://react-kabzda-1/./src/components/common/formsControls/formsControls.module.css?abd8","components/common/formsControls/FormsControls.tsx","webpack://react-kabzda-1/./src/components/login/login.module.css?e6ba","webpack://react-kabzda-1/./src/components/login/loginForm/loginForm.module.css?13e1","components/login/loginForm/LoginForm.tsx","components/login/Login.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"button_btn__yTdPR\"};","import * as React from \"react\";\r\nimport classes from \"./button.module.css\";\r\n\r\ntype PropsType = {\r\n  children: React.ReactNode;\r\n  disabled?: boolean;\r\n  type?: \"submit\" | \"reset\" | \"button\";\r\n  handler?: () => void;\r\n};\r\n\r\nconst Button = ({ children, disabled, type, handler }: PropsType) => {\r\n  return (\r\n    <button\r\n      type={type}\r\n      disabled={disabled}\r\n      className={classes.btn}\r\n      onClick={handler}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"errorText\":\"formsControls_errorText__Ntz7y\",\"error\":\"formsControls_error__dz7fn\",\"field\":\"formsControls_field__AORmK\",\"select\":\"formsControls_select__snGfR\",\"selectFocus\":\"formsControls_selectFocus__7WGyH\"};","import React, { useRef } from \"react\";\r\nimport classes from \"./formsControls.module.css\";\r\nimport { FieldInputProps, FieldMetaState } from \"react-final-form\";\r\nimport { useResizeTextarea } from \"../../../hooks/hooks\";\r\n\r\ntype FormControls = {\r\n  input: FieldInputProps<string>;\r\n  meta: FieldMetaState<string>;\r\n\tvalidlength?: number;\r\n\tentertern?: boolean;\r\n};\r\n\r\nexport const Textarea = ({\r\n  input,\r\n  meta: { error, touched },\r\n  ...props\r\n}: FormControls) => {\r\n  const field = useRef<HTMLTextAreaElement>(null);\r\n\r\n\tuseResizeTextarea(field.current, props.validlength, props.entertern)\r\n\r\n  const hasError = error && touched;\r\n\r\n  return (\r\n    <>\r\n      <div className={hasError ? classes.error : classes.field}>\r\n        <textarea ref={field} {...input} {...props} />\r\n      </div>\r\n      <span className={classes.errorText}>{hasError ? error : null}</span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Input = ({\r\n  input,\r\n  meta: { error, submitError, touched },\r\n  ...props\r\n}: FormControls) => {\r\n  const hasError = (error || submitError) && touched;\r\n  return (\r\n    <>\r\n      <div className={hasError ? classes.error : classes.field}>\r\n        <input {...input} {...props} />\r\n      </div>\r\n      <span className={classes.errorText}>\r\n        {hasError ? error || submitError : null}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\n// export const ReactSelectAdapter = ({ input, ...rest }) => (\r\n//   <Select\r\n//     {...input}\r\n//     {...rest}\r\n//     classNames={{\r\n//       control: (state) =>\r\n//         state.isFocused\r\n//           ? classes.selectFocus + \" \" + classes.select\r\n//           : classes.select,\r\n//     }}\r\n//   />\r\n// );\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"login_container__aWnNB\",\"content\":\"login_content__pvaPb\",\"logo\":\"login_logo__q07+7\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"loginForm_form__moZeU\",\"msgInf\":\"loginForm_msgInf__YCHow\",\"inputWrapper\":\"loginForm_inputWrapper__gWiQ2\",\"inputText\":\"loginForm_inputText__VF0Zh\",\"checkboxArea\":\"loginForm_checkboxArea__aZOgy\",\"rememberDescr\":\"loginForm_rememberDescr__asWvH\",\"descr\":\"loginForm_descr__05HjX\",\"captcha\":\"loginForm_captcha__e6iX4\",\"btnWrapper\":\"loginForm_btnWrapper__ecnb-\",\"line\":\"loginForm_line__43ft+\",\"submitError\":\"loginForm_submitError__KSJAD\"};","import { FORM_ERROR } from \"final-form\";\r\nimport React from \"react\";\r\nimport classes from \"./loginForm.module.css\";\r\nimport { Field, Form } from \"react-final-form\";\r\nimport { Input } from \"../../common/formsControls/FormsControls\";\r\nimport {\r\n  composeValidators,\r\n  maxLength,\r\n  required,\r\n} from \"../../../utils/validators/validators\";\r\nimport Icon from \"../../icon/Icon\";\r\nimport Button from \"../../common/button/Button\";\r\n\r\ntype PropsType = {\r\n  login: (values: {\r\n    email?: string;\r\n    password?: string;\r\n    rememberMe: boolean;\r\n    captcha?: string;\r\n  }) => Promise<string | null>;\r\n  captchaUrl: string | null;\r\n};\r\n\r\ntype Values = {\r\n  email?: string;\r\n  password?: string;\r\n  rememberMe: boolean;\r\n  captcha?: string;\r\n};\r\n\r\nconst LoginForm = ({ login, captchaUrl }: PropsType) => {\r\n  return (\r\n    <Form\r\n      onSubmit={async (values: Values) => {\r\n        let errorMessage = await login(values);\r\n        if (errorMessage) {\r\n          return { [FORM_ERROR]: errorMessage };\r\n        }\r\n      }}\r\n      initialValues={{ rememberMe: false }}\r\n      render={({ submitError, handleSubmit, values, submitting, pristine }) => (\r\n        <form onSubmit={handleSubmit} action=\"\" className={classes.form}>\r\n          <div className={classes.msgInf}>\r\n            To view this page, you need to go to the website.\r\n          </div>\r\n          <div className={classes.inputWrapper}>\r\n            <Field\r\n              name=\"email\"\r\n              component={Input}\r\n              type=\"text\"\r\n              placeholder={\"Email\"}\r\n              validate={composeValidators(required, maxLength(30))}\r\n              autoComplete=\"username\"\r\n              className={classes.inputText}\r\n            />\r\n          </div>\r\n          <div className={classes.inputWrapper}>\r\n            <Field\r\n              name=\"password\"\r\n              component={Input}\r\n              type=\"password\"\r\n              placeholder={\"Password\"}\r\n              validate={composeValidators(required, maxLength(30))}\r\n              autoComplete=\"current-password\"\r\n              className={classes.inputText}\r\n            />\r\n          </div>\r\n          <div className={classes.checkboxArea}>\r\n            <label>\r\n              <Field\r\n                name=\"rememberMe\"\r\n                component={'input'}\r\n                type=\"checkbox\"\r\n                className={classes.inputcheck}\r\n              />\r\n              <span>Remember me</span>\r\n            </label>\r\n            <div className={classes.rememberDescr}>\r\n              <Icon name={'Remember'} />\r\n            </div>\r\n            <div className={classes.descr}>\r\n              <h4>Save Login Select</h4>\r\n              <span>\r\n                to save your account details for quick login on this device\r\n              </span>\r\n            </div>\r\n          </div>\r\n          {captchaUrl ? (\r\n            <div className={classes.inputWrapper}>\r\n              <div className={classes.captcha}>\r\n                <img src={captchaUrl} alt=\"captcha\" />\r\n              </div>\r\n              <Field\r\n                name=\"captcha\"\r\n                component={Input}\r\n                type=\"text\"\r\n                placeholder={\"Symbols from image\"}\r\n                // validate={composeValidators(required, maxLength(10))}\r\n                className={classes.inputText}\r\n              />\r\n            </div>\r\n          ) : null}\r\n          <div className={classes.btnWrapper}>\r\n            <Button disabled={submitting || pristine} type={\"submit\"}>\r\n              Sing in\r\n            </Button>\r\n          </div>\r\n          <div className={classes.line}></div>\r\n          {Boolean(submitError) && (\r\n            <div className={classes.submitError}>{submitError}</div>\r\n          )}\r\n        </form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React from \"react\";\r\nimport classes from \"./login.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../../redux/auth-reduser\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport LoginForm from \"./loginForm/LoginForm\";\r\nimport { RootState } from \"../../redux/redux-store\";\r\n\r\ntype PropsType = {\r\n  isAuth: boolean;\r\n  captchaUrl: string | null;\r\n  login: (values: {\r\n    email?: string;\r\n    password?: string;\r\n    rememberMe: boolean;\r\n    captcha?: string;\r\n  }) => Promise<string | null>;\r\n};\r\n\r\nconst Login = ({ isAuth, login, captchaUrl }: PropsType) => {\r\n  return isAuth ? (\r\n    <Navigate to={\"/profile/me\"} />\r\n  ) : (\r\n    <div className={classes.container}>\r\n      <div className={classes.content}>\r\n        <div className={classes.logo}>\r\n          <img\r\n            src={`${process.env.PUBLIC_URL}/logo.png`}\r\n            alt=\"logo\"\r\n          />\r\n          <h1 className={classes.header}>3RACHA</h1>\r\n        </div>\r\n        <LoginForm login={login} captchaUrl={captchaUrl} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n","export type FildValidator = (value: string) => string | undefined;\r\n\r\nexport const required: FildValidator = (value) => {\r\n  return value ? undefined : \"Field is requred\";\r\n};\r\n\r\nexport const maxLength =\r\n  (max: number): FildValidator =>\r\n  (value: string) => {\r\n    return value?.length > max ? `Max length is ${max} symbols` : undefined;\r\n  };\r\n\r\nexport const composeValidators =\r\n  (...validators: Array<FildValidator>) =>\r\n  (value: string) =>\r\n    validators.reduce<string | undefined>(\r\n      (error, validator) => error || validator(value),\r\n      undefined\r\n    );\r\n"],"names":["_ref","children","disabled","type","handler","_jsx","className","classes","onClick","Textarea","input","meta","error","touched","props","field","useRef","useResizeTextarea","current","validlength","entertern","hasError","_jsxs","_Fragment","ref","Input","_ref2","submitError","login","captchaUrl","Form","onSubmit","async","errorMessage","values","FORM_ERROR","initialValues","rememberMe","render","handleSubmit","submitting","pristine","action","form","msgInf","inputWrapper","Field","name","component","placeholder","validate","composeValidators","required","maxLength","autoComplete","inputText","checkboxArea","inputcheck","rememberDescr","Icon","descr","captcha","src","alt","btnWrapper","Button","line","Boolean","connect","state","isAuth","auth","Navigate","to","container","content","logo","header","LoginForm","value","undefined","max","length","_len","arguments","validators","Array","_key","reduce","validator"],"sourceRoot":""}