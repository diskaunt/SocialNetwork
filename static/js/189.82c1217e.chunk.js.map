{"version":3,"file":"static/js/189.82c1217e.chunk.js","mappings":"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","sources":["webpack://react-kabzda-1/./src/components/common/button/button.module.css?89cf","components/common/button/Button.tsx","webpack://react-kabzda-1/./src/components/common/formsControls/formsControls.module.css?abd8","components/common/formsControls/FormsControls.tsx","webpack://react-kabzda-1/./src/components/dialogs/dialogs.module.css?c5d1","webpack://react-kabzda-1/./src/components/dialogs/dialogItem/dialogItem.module.css?53be","components/dialogs/dialogItem/DialogItem.tsx","webpack://react-kabzda-1/./src/components/dialogs/message/message.module.css?f3a2","components/dialogs/message/Message.tsx","hoc/withAuthRedirect.tsx","components/dialogs/NewMessageForm.tsx","components/dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"button_btn__yTdPR\"};","import * as React from \"react\";\r\nimport classes from \"./button.module.css\";\r\n\r\ntype PropsType = {\r\n  children: React.ReactNode;\r\n  disabled?: boolean;\r\n  type?: \"submit\" | \"reset\" | \"button\";\r\n  handler?: () => void;\r\n};\r\n\r\nconst Button = ({ children, disabled, type, handler }: PropsType) => {\r\n  return (\r\n    <button\r\n      type={type}\r\n      disabled={disabled}\r\n      className={classes.btn}\r\n      onClick={handler}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"errorText\":\"formsControls_errorText__Ntz7y\",\"error\":\"formsControls_error__dz7fn\",\"field\":\"formsControls_field__AORmK\",\"select\":\"formsControls_select__snGfR\",\"selectFocus\":\"formsControls_selectFocus__7WGyH\"};","import React, { useRef } from \"react\";\r\nimport classes from \"./formsControls.module.css\";\r\nimport { FieldInputProps, FieldMetaState } from \"react-final-form\";\r\nimport { useResizeTextarea } from \"../../../hooks/hooks\";\r\n\r\ntype FormControls = {\r\n  input: FieldInputProps<string>;\r\n  meta: FieldMetaState<string>;\r\n\tvalidlength?: number;\r\n\tentertern?: boolean;\r\n};\r\n\r\nexport const Textarea = ({\r\n  input,\r\n  meta: { error, touched },\r\n  ...props\r\n}: FormControls) => {\r\n  const field = useRef<HTMLTextAreaElement>(null);\r\n\r\n\tuseResizeTextarea(field.current, props.validlength, props.entertern)\r\n\r\n  const hasError = error && touched;\r\n\r\n  return (\r\n    <>\r\n      <div className={hasError ? classes.error : classes.field}>\r\n        <textarea ref={field} {...input} {...props} />\r\n      </div>\r\n      <span className={classes.errorText}>{hasError ? error : null}</span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Input = ({\r\n  input,\r\n  meta: { error, submitError, touched },\r\n  ...props\r\n}: FormControls) => {\r\n  const hasError = (error || submitError) && touched;\r\n  return (\r\n    <>\r\n      <div className={hasError ? classes.error : classes.field}>\r\n        <input {...input} {...props} />\r\n      </div>\r\n      <span className={classes.errorText}>\r\n        {hasError ? error || submitError : null}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\n// export const ReactSelectAdapter = ({ input, ...rest }) => (\r\n//   <Select\r\n//     {...input}\r\n//     {...rest}\r\n//     classNames={{\r\n//       control: (state) =>\r\n//         state.isFocused\r\n//           ? classes.selectFocus + \" \" + classes.select\r\n//           : classes.select,\r\n//     }}\r\n//   />\r\n// );\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"dialogs_dialogs__7c9r4\",\"dialogsItems\":\"dialogs_dialogsItems__x-VZD\",\"messages\":\"dialogs_messages__spNWx\",\"content\":\"dialogs_content__I58vd\",\"messagesElements\":\"dialogs_messagesElements__9qE3O\",\"newMessageForm\":\"dialogs_newMessageForm__fD7wd\",\"newMessageFild\":\"dialogs_newMessageFild__zf2Zk\",\"btnWrapper\":\"dialogs_btnWrapper__xwxnk\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"dialogItem_dialog__7gtwi\",\"active\":\"dialogItem_active__ptWk1\",\"ava\":\"dialogItem_ava__PJ+09\",\"name\":\"dialogItem_name__9Ikfh\"};","import React from \"react\";\r\nimport classes from \"./dialogItem.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { DialogType } from \"../../../types/types\";\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n  const path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div id={classes.key} className={classes.dialog}>\r\n      <NavLink\r\n        className={({ isActive }) => (isActive ? classes.active : \"\")}\r\n        to={path}\r\n      >\r\n        <div className={classes.ava}>\r\n          <img src={props.avatar} alt=\"ava\" />\r\n        </div>\r\n        <div className={classes.name}>{props.name}</div>\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"message_message__2yNNp\",\"ava\":\"message_ava__9ves7\",\"name\":\"message_name__WfNhp\",\"date\":\"message_date__ctzK3\",\"text\":\"message_text__G5Je0\"};","import React from \"react\";\r\nimport classes from \"./message.module.css\"\r\nimport { MessageType } from \"../../../types/types\";\r\n\r\nconst Message = (props: MessageType) => {\r\n\tconst time = props.date && props.date.split(\",\")[1]\r\n\treturn (\r\n    <div className={classes.message}>\r\n      <div className={classes.ava}><img src={props.avatar} alt=\"ava\"/></div>\r\n      <div className={classes.name}>{props.name || 'name'}</div>\r\n\t\t\t<div className={classes.date}>{time}</div>\r\n      <div className={classes.text}>{props.message}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;","import React, { ComponentType } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { RootState } from \"../redux/redux-store\";\r\nimport { AuthType } from \"../types/types\";\r\n\r\ntype MapStateToPropsForRedirect = {\r\n  auth: AuthType;\r\n};\r\n\r\nconst mapStateToPropsForRedirect = (\r\n  state: RootState\r\n): MapStateToPropsForRedirect => ({\r\n  auth: state.auth,\r\n});\r\n\r\nexport const withAuthRedirect = <CP extends object>(\r\n  Component: ComponentType<CP>\r\n) => {\r\n  const RedirectComponent = (props: MapStateToPropsForRedirect) => {\r\n    if (!props.auth.isAuth) return <Navigate to={\"/login\"} />;\r\n    return <Component {...props as CP} />;\r\n  };\r\n  return connect<MapStateToPropsForRedirect, {}, CP, RootState>(mapStateToPropsForRedirect)(RedirectComponent);\r\n};\r\n","import React from \"react\";\r\nimport { Field, Form } from \"react-final-form\";\r\nimport Button from \"../common/button/Button\";\r\nimport classes from \"./dialogs.module.css\";\r\nimport { Textarea } from \"../common/formsControls/FormsControls\";\r\n\r\ntype PropsType = {\r\n  onSendMessage: (\r\n    values: { newMessageBody: string },\r\n    form: Record<string, any>\r\n  ) => void;\r\n};\r\n\r\nconst NewMessageForm = ({ onSendMessage }: PropsType) => {\r\n  return (\r\n    <Form\r\n      onSubmit={onSendMessage}\r\n      render={({ handleSubmit, form, submitting, pristine, values }) => (\r\n        <form onSubmit={handleSubmit} className={classes.newMessageForm}>\r\n          <Field<string>\r\n            name=\"newMessageBody\"\r\n            component={Textarea}\r\n            // validate={composeValidators(maxLength(1000))}\r\n            placeholder=\"Write a message...\"\r\n            type=\"text\"\r\n            className={classes.newMessageFild}\r\n          />\r\n          <div className={classes.btnWrapper}>\r\n            <Button type=\"submit\" disabled={submitting || pristine}>\r\n              Send\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default NewMessageForm;\r\n","import React, { ComponentType, useEffect, useRef } from 'react';\r\nimport classes from './dialogs.module.css';\r\nimport DialogItem from './dialogItem/DialogItem';\r\nimport Message from './message/Message';\r\nimport { connect } from 'react-redux';\r\nimport { sendMessage } from '../../redux/dialogs-reducer';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { RootState } from '../../redux/redux-store';\r\nimport NewMessageForm from './NewMessageForm';\r\nimport { DialogsPageType, DialogType, MessageType } from '../../types/types';\r\nimport { useParams } from 'react-router-dom';\r\n\r\ntype MapStateToProps = {\r\n  dialogsPage: DialogsPageType;\r\n};\r\n\r\ntype MapActionToProps = {\r\n  sendMessage: (payload: { id: number; newMessageBody: string }) => void;\r\n};\r\n\r\ntype DialogParams = {\r\n  dialogId: string;\r\n};\r\n\r\ntype Props = MapStateToProps & MapActionToProps;\r\n\r\nconst Dialogs = (props: Props) => {\r\n  // let [selectedDialog, setSelectedDialog] = useState<number>(0);\r\n  // const location = useLocation();\r\n  // const currentPath = location.pathname;\r\n  // const selectedId = +currentPath.split('/')[currentPath.split('/').length - 1];\r\n  // if (!isNaN(selectedId) && selectedId !== selectedDialog) {\r\n  //   setSelectedDialog(selectedId);\r\n  // }\r\n\r\n  const { dialogId } = useParams<DialogParams>();\r\n  const selectedDialogId = parseInt(dialogId || '0', 10);\r\n\r\n  useEffect(() => {\r\n    if (!isNaN(selectedDialogId) && selectedDialogId > 0) {\r\n      // Загрузка данных или другая логика\r\n    }\r\n  }, [selectedDialogId]);\r\n\r\n  let dialogsElements = props.dialogsPage.dialogs.map((dialog: DialogType) => (\r\n    <DialogItem\r\n      key={dialog.id}\r\n      id={dialog.id}\r\n      name={dialog.name || 'name'}\r\n      avatar={\r\n        dialog.avatar ||\r\n        'https://i5.imageban.ru/out/2024/04/23/1bb19e775b66a89851ce626a69603c73.png'\r\n      }\r\n      messages={dialog.messages}\r\n    />\r\n  ));\r\n\r\n  let messagesElements = props.dialogsPage.dialogs[\r\n    selectedDialogId\r\n  ].messages.map((message: MessageType) => (\r\n    <Message\r\n      key={message.id}\r\n      id={message.id}\r\n      message={message.message}\r\n      avatar={\r\n        message.avatar ||\r\n        'https://i5.imageban.ru/out/2024/04/23/1bb19e775b66a89851ce626a69603c73.png'\r\n      }\r\n      date={message.date}\r\n    />\r\n  ));\r\n\r\n  const scrollTo = useRef<null | HTMLDivElement>(null);\r\n\r\n  // Функция отправки сообщения и сролинга к нему\r\n  const onSendMessage = async (\r\n    values: { newMessageBody: string },\r\n    form: Record<string, any>\r\n  ) => {\r\n    await props.sendMessage({\r\n      id: selectedDialogId,\r\n      newMessageBody: values.newMessageBody,\r\n    });\r\n    scrollTo.current &&\r\n      scrollTo.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n    form.reset();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n      <div className={classes.dialogsItems}>{dialogsElements}</div>\r\n      <div className={classes.messages}>\r\n        <div className={classes.content}>\r\n          <div className={classes.messagesElements}>{messagesElements}</div>\r\n          <NewMessageForm onSendMessage={onSendMessage} />\r\n          <div ref={scrollTo}></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nlet mapStateToProps = (state: RootState): MapStateToProps => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nexport default compose<ComponentType>(\r\n  withAuthRedirect,\r\n  connect(mapStateToProps, { sendMessage })\r\n)(Dialogs);\r\n"],"names":["_ref","children","disabled","type","handler","_jsx","className","classes","onClick","Textarea","input","meta","error","touched","props","field","useRef","useResizeTextarea","current","validlength","entertern","hasError","_jsxs","_Fragment","ref","Input","_ref2","submitError","path","id","key","dialog","NavLink","isActive","active","to","ava","src","avatar","alt","name","time","date","split","message","mapStateToPropsForRedirect","state","auth","onSendMessage","Form","onSubmit","render","handleSubmit","form","submitting","pristine","values","Field","component","placeholder","Button","compose","Component","connect","isAuth","Navigate","dialogsPage","sendMessage","dialogId","useParams","selectedDialogId","parseInt","useEffect","isNaN","dialogsElements","dialogs","map","DialogItem","messages","messagesElements","Message","scrollTo","NewMessageForm","async","newMessageBody","scrollIntoView","behavior","block","reset"],"sourceRoot":""}