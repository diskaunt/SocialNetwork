{"version":3,"file":"static/js/99.a09b46ee.chunk.js","mappings":"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","sources":["webpack://react-kabzda-1/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://react-kabzda-1/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://react-kabzda-1/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/NewMessageForm.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__P9QVB\",\"dialogsItems\":\"Dialogs_dialogsItems__GHkAb\",\"messages\":\"Dialogs_messages__jluhN\",\"content\":\"Dialogs_content__mtwJX\",\"messagesElements\":\"Dialogs_messagesElements__PycBx\",\"newMessageForm\":\"Dialogs_newMessageForm__bHr6v\",\"newMessageFild\":\"Dialogs_newMessageFild__W4adw\",\"btnWrapper\":\"Dialogs_btnWrapper__cRrq6\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__j8fbf\",\"active\":\"DialogItem_active__ss0sa\",\"ava\":\"DialogItem_ava__j8cfk\",\"name\":\"DialogItem_name__G+-KC\"};","import React from \"react\";\r\nimport classes from \"./DialogItem.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { DialogType } from \"../../../types/types\";\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n  const path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div id={classes.key} className={classes.dialog}>\r\n      <NavLink\r\n        className={({ isActive }) => (isActive ? classes.active : \"\")}\r\n        to={path}\r\n      >\r\n        <div className={classes.ava}>\r\n          <img src={props.avatar} alt=\"ava\" />\r\n        </div>\r\n        <div className={classes.name}>{props.name}</div>\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__asuSK\",\"ava\":\"Message_ava__QoGXy\",\"name\":\"Message_name__cg7j+\",\"date\":\"Message_date__1XDFC\",\"text\":\"Message_text__nAlzc\"};","import React from \"react\";\r\nimport classes from \"./Message.module.css\"\r\nimport { MessageType } from \"../../../types/types\";\r\n\r\nconst Message = (props: MessageType) => {\r\n\tconst time = props.date && props.date.split(\",\")[1]\r\n\treturn (\r\n    <div className={classes.message}>\r\n      <div className={classes.ava}><img src={props.avatar} alt=\"ava\"/></div>\r\n      <div className={classes.name}>{props.name || 'name'}</div>\r\n\t\t\t<div className={classes.date}>{time}</div>\r\n      <div className={classes.text}>{props.message}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;","import React, { ComponentType } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { RootState } from \"../redux/redux-store\";\r\nimport { AuthType } from \"../types/types\";\r\n\r\ntype MapStateToPropsForRedirect = {\r\n  auth: AuthType;\r\n};\r\n\r\nconst mapStateToPropsForRedirect = (\r\n  state: RootState\r\n): MapStateToPropsForRedirect => ({\r\n  auth: state.auth,\r\n});\r\n\r\nexport const withAuthRedirect = <CP extends object>(\r\n  Component: ComponentType<CP>\r\n) => {\r\n  const RedirectComponent = (props: MapStateToPropsForRedirect) => {\r\n    if (!props.auth.isAuth) return <Navigate to={\"/login\"} />;\r\n    return <Component {...props as CP} />;\r\n  };\r\n  return connect<MapStateToPropsForRedirect, {}, CP, RootState>(mapStateToPropsForRedirect)(RedirectComponent);\r\n};\r\n","import React from \"react\";\r\nimport { Field, Form } from \"react-final-form\";\r\nimport Button from \"../common/Button/Button\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\n\r\ntype PropsType = {\r\n  onSendMessage: (\r\n    values: { newMessageBody: string },\r\n    form: Record<string, any>\r\n  ) => void;\r\n};\r\n\r\nconst NewMessageForm = ({ onSendMessage }: PropsType) => {\r\n  return (\r\n    <Form\r\n      onSubmit={onSendMessage}\r\n      render={({ handleSubmit, form, submitting, pristine, values }) => (\r\n        <form onSubmit={handleSubmit} className={classes.newMessageForm}>\r\n          <Field<string>\r\n            name=\"newMessageBody\"\r\n            component={Textarea}\r\n            // validate={composeValidators(maxLength(1000))}\r\n            placeholder=\"Write a message...\"\r\n            type=\"text\"\r\n            className={classes.newMessageFild}\r\n          />\r\n          <div className={classes.btnWrapper}>\r\n            <Button type=\"submit\" disabled={submitting || pristine}>\r\n              Send\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default NewMessageForm;\r\n","import React, { ComponentType, useRef } from \"react\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { connect } from \"react-redux\";\r\nimport { sendMessage } from \"../../redux/dialogs-reducer\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { RootState } from \"../../redux/redux-store\";\r\nimport NewMessageForm from \"./NewMessageForm\";\r\nimport { DialogsPageType, DialogType, MessageType } from \"../../types/types\";\r\n\r\ntype MapStateToProps = {\r\n  dialogsPage: DialogsPageType;\r\n};\r\n\r\ntype MapActionToProps = {\r\n  sendMessage: (message: string) => void;\r\n};\r\n\r\ntype Props = MapStateToProps & MapActionToProps;\r\n\r\nconst Dialogs = (props: Props) => {\r\n  let dialogsElements = props.dialogsPage.dialogs.map((dialog: DialogType) => (\r\n    <DialogItem\r\n      key={dialog.id}\r\n      id={dialog.id}\r\n      name={dialog.name || \"name\"}\r\n      avatar={\r\n        dialog.avatar ||\r\n        \"https://i5.imageban.ru/out/2024/04/23/1bb19e775b66a89851ce626a69603c73.png\"\r\n      }\r\n    />\r\n  ));\r\n\r\n  let messagesElements = props.dialogsPage.messages.map(\r\n    (message: MessageType) => (\r\n      <Message\r\n        key={message.id}\r\n        id={message.id}\r\n        message={message.message}\r\n        avatar={\r\n          message.avatar ||\r\n          \"https://i5.imageban.ru/out/2024/04/23/1bb19e775b66a89851ce626a69603c73.png\"\r\n        }\r\n        date={message.date}\r\n      />\r\n    )\r\n  );\r\n\r\n  const scrollTo = useRef<null | HTMLDivElement>(null);\r\n\r\n  const onSendMessage = async (values: { newMessageBody: string }, form: Record<string, any>) => {\r\n    await props.sendMessage(values.newMessageBody);\r\n    scrollTo.current &&\r\n      scrollTo.current.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n    form.reset()\r\n  };\r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n      <div className={classes.dialogsItems}>{dialogsElements}</div>\r\n      <div className={classes.messages}>\r\n        <div className={classes.content}>\r\n          <div className={classes.messagesElements}>{messagesElements}</div>\r\n          <NewMessageForm onSendMessage={onSendMessage} />\r\n          <div ref={scrollTo}></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nlet mapStateToProps = (state: RootState): MapStateToProps => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nexport default compose<ComponentType>(\r\n  withAuthRedirect,\r\n  connect(mapStateToProps, { sendMessage })\r\n)(Dialogs);\r\n"],"names":["props","path","id","_jsx","classes","key","className","dialog","children","_jsxs","NavLink","_ref","isActive","active","to","ava","src","avatar","alt","name","time","date","split","message","mapStateToPropsForRedirect","state","auth","onSendMessage","Form","onSubmit","render","_ref2","handleSubmit","form","submitting","pristine","values","Field","component","Textarea","placeholder","type","Button","disabled","compose","Component","connect","isAuth","Navigate","dialogsPage","sendMessage","dialogsElements","dialogs","map","DialogItem","messagesElements","messages","Message","scrollTo","useRef","NewMessageForm","async","newMessageBody","current","scrollIntoView","behavior","block","reset","ref"],"sourceRoot":""}